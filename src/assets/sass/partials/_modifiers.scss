@import './_variables.scss';

// Drop Shadows
.vs-shadow {
  box-shadow: 0 0 5px rgba(0, 0, 0, .2);
}
.vs-shadow-md {
  box-shadow: 0 0 15px rgba(0, 0, 0, .32);
}

.vs-rotate-45 {
  transform:rotate(45deg);
}

// Border Radius
$directions:top bottom left right;
.vs-corners-3 {
  border-radius:3px;
}
.vs-corners-5 {
  border-radius:5px;
}
.vs-corners-10 {
  border-radius:10px;
}
@each $direction in $directions {
  .vs-corners-#{$direction}-3 {
    border-radius:5px 5px 0 0;
  }

  .vs-corners-#{$direction}-5 {
    border-radius:5px 5px 0 0;
  }
}

.vs-rounded {
  border-radius:50%;

  &.vs-inset-border {
    border:2px solid #fff;
    background:#fff;
  }
}


// Borders
$borderDirections: (
  ba: ( border ),
  bv: ( border-top, border-bottom ),
  bt: ( border-top ),
  bb: ( border-bottom ),
  bh: ( border-left, border-right ),
  br: ( border-right ),
  bl: ( border-left )
);
// Loop from 1 to 3 for each different border width value
@for $i from 1 through 7 {

  // Loop through the directions and add additional modifiers

  @each $parentKey, $parentValue in $borderDirections {
    .vs-#{$parentKey}-white-#{$i} {
      @each $property in $parentValue {
        #{$property}:#{$i}px solid #fff;
      }
    }

    .vs-#{$parentKey}-black-#{$i} {
      @each $property in $parentValue {
        #{$property}:#{$i}px solid #000;
      }
    }

    // Loop through each brand color and add the color modifier
    @each $key, $value in $brand_colors {
      .vs-#{$parentKey}-#{$key}-#{$i} {
        @each $property in $parentValue {
          #{$property}: #{$i}px solid $value;
        }

        &.vs-border-darken {
          border-color: darken($value, 12%);
        }
      }
    }

    // Loop through each content color and add the color modifier
    @each $key, $value in $content_colors {
      .vs-#{$parentKey}-#{$key}-#{$i} {
        @each $property in $parentValue {
          #{$property}: #{$i}px solid $value;
        }

        &.vs-border-darken {
          border-color: darken($value, 12%);
        }
      }
    }

    // Loop through each grey and add the color modifier
    @each $index, $grey in $greys {
      .vs-#{$parentKey}-grey-#{$index}-#{$i} {
        @each $property in $parentValue {
          #{$property}: #{$i}px solid #{$grey};
        }

        &.vs-border-darken {
          border-color: darken($grey, 12%);
        }
      }
    }
  }
}

.vs-dashed {
  border-style:dashed;
}

.vs-pointer {
  cursor:pointer;
}

// No Select
.vs-noselect {
  user-select: none;
}

// Overflow
.vs-overflow {
  overflow:hidden;
}

.vs-overflow-y {
  overflow-y:hidden;
}

.vs-overflow-x {
  overflow-x:hidden;
}

.vs-overflow-auto {
  overflow:auto;
}

.vs-overflow-y-auto {
  overflow-y:auto;
}

.vs-overflow-x-auto {
  overflow-x:auto;
}

.vs-overflow-visible {
  overflow:visible!important;
}

.vs-nowrap {
  white-space:nowrap;
}

.vs-text-truncate {
  width:100%;
  overflow:hidden;
  white-space:nowrap;
  text-overflow:ellipsis;
}

.vs-text-truncate-2-lines {
  max-height:3em;
  overflow:hidden;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;

  &.vs-font-compressed {
    max-height:2.5em;
  }
}

// Box Ratios
.vs-square {
  position:relative;
  height:0;
  padding-bottom:100%;

  & > img {
    position:absolute;
    top:0;
    left:0;
    height:100%;
    width:100%;
    object-fit: cover;
  }
}

.vs-widescreen {
  position:relative;
  height:0;
  padding-bottom:56.25%;

  & > iframe, & > img {
    position:absolute;
    top:0;
    left:0;
    height:100%;
    width:100%;
  }

  & > img {
    object-fit: cover;
  }
}

.vs-book-cover {
  position:relative;
  height:0;
  padding-bottom:126.25%;

  & > iframe, & > img {
    position:absolute;
    top:0;
    left:0;
    height:100%;
    width:100%;
  }

  & > img {
    object-fit: cover;
  }
}

.vs-box-4-by-3 {
  position:relative;
  height:0!important;
  padding-bottom:75%;
}

.vs-relative {
  position:relative;
}

.vs-absolute-center {
  @include centerBoth();
}

.vs-absolute-fill {
  position:absolute;
  top:0;
  left:0;
  width:100%;
  height:100%;
}

.vs-bg-center {
  background-size:cover;
  background-repeat:no-repeat;
  background-position:center;

  &.vs-contain {
    background-size:contain;
  }

  &.vs-contain-80 {
    background-size:80%;
  }
}

.vs-bg-top {
  background-size:cover;
  background-repeat:no-repeat;
  background-position:center top;

  &.vs-contain {
    background-size:contain;
  }

  &.vs-contain-80 {
    background-size:80%;
  }
}

.vs-desaturate {
  filter:saturate(0);
}

.vs-list-style-none {
  list-style-type:none;
  padding-left:0;
}

.vs-raised-hover {
  transform:scale(1);
  transition:transform .2s ease-in-out, box-shadow .2s ease-in-out;
  box-shadow:0 0 5px rgba(0,0,0,0);

  &:hover {
    transform:scale(1.02);
    box-shadow:0 0 7px rgba(0,0,0,.3);
  }
}

.vs-icon-bg-circle {
  height:35px;
  width:35px;
  min-height:35px;
  min-width:35px;
  @include flexCenter();
}

.vs-skeleton-loader, img[lazy=loading] {
  background-color:nth(nth($greys, 2), 2)!important;
  max-width:100%;
  overflow:hidden;
  position:relative;

  &:after {
    content: '';
    position:absolute;
    top:0;
    left:0;
    right:0;
    bottom:0;
    width:100%;
    animation: skeleton-loader 1s infinite;
    transform:translateX(-100%);
    background:linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.5), transparent);
  }
}
